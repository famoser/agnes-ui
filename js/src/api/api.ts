// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Agnes UI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AcrossInstancesAction
 */
export interface AcrossInstancesAction {
    /**
     * 
     * @type {Instance}
     * @memberof AcrossInstancesAction
     */
    source: Instance;
    /**
     * 
     * @type {Instance}
     * @memberof AcrossInstancesAction
     */
    target: Instance;
}
/**
 * 
 * @export
 * @interface CopyShared
 */
export interface CopyShared {
    /**
     * 
     * @type {string}
     * @memberof CopyShared
     */
    target: string;
    /**
     * 
     * @type {string}
     * @memberof CopyShared
     */
    source: string;
}
/**
 * 
 * @export
 * @interface Deployment
 */
export interface Deployment {
    /**
     * 
     * @type {string}
     * @memberof Deployment
     */
    target: string;
    /**
     * 
     * @type {string}
     * @memberof Deployment
     */
    release: string;
}
/**
 * 
 * @export
 * @interface Installation
 */
export interface Installation {
    /**
     * 
     * @type {Release}
     * @memberof Installation
     */
    release?: Release;
}
/**
 * 
 * @export
 * @interface Instance
 */
export interface Instance {
    /**
     * 
     * @type {string}
     * @memberof Instance
     */
    server: string;
    /**
     * 
     * @type {string}
     * @memberof Instance
     */
    environment: string;
    /**
     * 
     * @type {string}
     * @memberof Instance
     */
    stage: string;
    /**
     * 
     * @type {string}
     * @memberof Instance
     */
    currentReleaseName?: string;
}
/**
 * 
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    path: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    content: string;
}
/**
 * 
 * @export
 * @interface PendingReleaseInstance
 */
export interface PendingReleaseInstance {
    /**
     * 
     * @type {string}
     * @memberof PendingReleaseInstance
     */
    pendingReleaseName: string;
    /**
     * 
     * @type {Instance}
     * @memberof PendingReleaseInstance
     */
    instance: Instance;
}
/**
 * 
 * @export
 * @interface Release
 */
export interface Release {
    /**
     * 
     * @type {string}
     * @memberof Release
     */
    commitish: string;
    /**
     * 
     * @type {string}
     * @memberof Release
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Release
     */
    name: string;
}
/**
 * 
 * @export
 * @interface Rollback
 */
export interface Rollback {
    /**
     * 
     * @type {string}
     * @memberof Rollback
     */
    target: string;
    /**
     * 
     * @type {string}
     * @memberof Rollback
     */
    rollbackFrom?: string;
    /**
     * 
     * @type {string}
     * @memberof Rollback
     */
    rollbackTo?: string;
}

/**
 * CopySharedApi - axios parameter creator
 * @export
 */
export const CopySharedApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Copy the shared data from source to target (replicate source on target).
         * @param {CopyShared} copyShared The copy shared action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyShared(copyShared: CopyShared, options: any = {}): RequestArgs {
            // verify required parameter 'copyShared' is not null or undefined
            if (copyShared === null || copyShared === undefined) {
                throw new RequiredError('copyShared','Required parameter copyShared was null or undefined when calling copyShared.');
            }
            const localVarPath = `/copyShared`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"CopyShared" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(copyShared !== undefined ? copyShared : {}) : (copyShared || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check which instances the copy shared action would affect
         * @param {CopyShared} copyShared The copy shared action to dry run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copySharedDryRun(copyShared: CopyShared, options: any = {}): RequestArgs {
            // verify required parameter 'copyShared' is not null or undefined
            if (copyShared === null || copyShared === undefined) {
                throw new RequiredError('copyShared','Required parameter copyShared was null or undefined when calling copySharedDryRun.');
            }
            const localVarPath = `/copyShared/dryrun`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"CopyShared" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(copyShared !== undefined ? copyShared : {}) : (copyShared || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CopySharedApi - functional programming interface
 * @export
 */
export const CopySharedApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Copy the shared data from source to target (replicate source on target).
         * @param {CopyShared} copyShared The copy shared action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyShared(copyShared: CopyShared, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = CopySharedApiAxiosParamCreator(configuration).copyShared(copyShared, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Check which instances the copy shared action would affect
         * @param {CopyShared} copyShared The copy shared action to dry run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copySharedDryRun(copyShared: CopyShared, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AcrossInstancesAction>> {
            const localVarAxiosArgs = CopySharedApiAxiosParamCreator(configuration).copySharedDryRun(copyShared, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CopySharedApi - factory interface
 * @export
 */
export const CopySharedApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Copy the shared data from source to target (replicate source on target).
         * @param {CopyShared} copyShared The copy shared action
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copyShared(copyShared: CopyShared, options?: any) {
            return CopySharedApiFp(configuration).copyShared(copyShared, options)(axios, basePath);
        },
        /**
         * 
         * @summary Check which instances the copy shared action would affect
         * @param {CopyShared} copyShared The copy shared action to dry run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        copySharedDryRun(copyShared: CopyShared, options?: any) {
            return CopySharedApiFp(configuration).copySharedDryRun(copyShared, options)(axios, basePath);
        },
    };
};

/**
 * CopySharedApi - object-oriented interface
 * @export
 * @class CopySharedApi
 * @extends {BaseAPI}
 */
export class CopySharedApi extends BaseAPI {
    /**
     * 
     * @summary Copy the shared data from source to target (replicate source on target).
     * @param {CopyShared} copyShared The copy shared action
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopySharedApi
     */
    public copyShared(copyShared: CopyShared, options?: any) {
        return CopySharedApiFp(this.configuration).copyShared(copyShared, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Check which instances the copy shared action would affect
     * @param {CopyShared} copyShared The copy shared action to dry run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CopySharedApi
     */
    public copySharedDryRun(copyShared: CopyShared, options?: any) {
        return CopySharedApiFp(this.configuration).copySharedDryRun(copyShared, options)(this.axios, this.basePath);
    }

}


/**
 * DeployApi - axios parameter creator
 * @export
 */
export const DeployApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deploy to environments
         * @param {Deployment} deployment The deployment to start
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploy(deployment: Deployment, options: any = {}): RequestArgs {
            // verify required parameter 'deployment' is not null or undefined
            if (deployment === null || deployment === undefined) {
                throw new RequiredError('deployment','Required parameter deployment was null or undefined when calling deploy.');
            }
            const localVarPath = `/deloy`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Deployment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deployment !== undefined ? deployment : {}) : (deployment || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check which instances the deploy would affect
         * @param {Deployment} deployment The deployment to dry run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployDryRun(deployment: Deployment, options: any = {}): RequestArgs {
            // verify required parameter 'deployment' is not null or undefined
            if (deployment === null || deployment === undefined) {
                throw new RequiredError('deployment','Required parameter deployment was null or undefined when calling deployDryRun.');
            }
            const localVarPath = `/deloy/dryrun`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Deployment" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(deployment !== undefined ? deployment : {}) : (deployment || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeployApi - functional programming interface
 * @export
 */
export const DeployApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Deploy to environments
         * @param {Deployment} deployment The deployment to start
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploy(deployment: Deployment, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DeployApiAxiosParamCreator(configuration).deploy(deployment, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Check which instances the deploy would affect
         * @param {Deployment} deployment The deployment to dry run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployDryRun(deployment: Deployment, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Instance>> {
            const localVarAxiosArgs = DeployApiAxiosParamCreator(configuration).deployDryRun(deployment, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DeployApi - factory interface
 * @export
 */
export const DeployApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Deploy to environments
         * @param {Deployment} deployment The deployment to start
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploy(deployment: Deployment, options?: any) {
            return DeployApiFp(configuration).deploy(deployment, options)(axios, basePath);
        },
        /**
         * 
         * @summary Check which instances the deploy would affect
         * @param {Deployment} deployment The deployment to dry run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deployDryRun(deployment: Deployment, options?: any) {
            return DeployApiFp(configuration).deployDryRun(deployment, options)(axios, basePath);
        },
    };
};

/**
 * DeployApi - object-oriented interface
 * @export
 * @class DeployApi
 * @extends {BaseAPI}
 */
export class DeployApi extends BaseAPI {
    /**
     * 
     * @summary Deploy to environments
     * @param {Deployment} deployment The deployment to start
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public deploy(deployment: Deployment, options?: any) {
        return DeployApiFp(this.configuration).deploy(deployment, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Check which instances the deploy would affect
     * @param {Deployment} deployment The deployment to dry run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeployApi
     */
    public deployDryRun(deployment: Deployment, options?: any) {
        return DeployApiFp(this.configuration).deployDryRun(deployment, options)(this.axios, this.basePath);
    }

}


/**
 * InstanceApi - axios parameter creator
 * @export
 */
export const InstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary gets all instances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options: any = {}): RequestArgs {
            const localVarPath = `/instance/all`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstanceApi - functional programming interface
 * @export
 */
export const InstanceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary gets all instances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Instance>> {
            const localVarAxiosArgs = InstanceApiAxiosParamCreator(configuration).getAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InstanceApi - factory interface
 * @export
 */
export const InstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary gets all instances
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any) {
            return InstanceApiFp(configuration).getAll(options)(axios, basePath);
        },
    };
};

/**
 * InstanceApi - object-oriented interface
 * @export
 * @class InstanceApi
 * @extends {BaseAPI}
 */
export class InstanceApi extends BaseAPI {
    /**
     * 
     * @summary gets all instances
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstanceApi
     */
    public getAll(options?: any) {
        return InstanceApiFp(this.configuration).getAll(options)(this.axios, this.basePath);
    }

}


/**
 * ReleaseApi - axios parameter creator
 * @export
 */
export const ReleaseApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new release
         * @param {Release} release The release to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(release: Release, options: any = {}): RequestArgs {
            // verify required parameter 'release' is not null or undefined
            if (release === null || release === undefined) {
                throw new RequiredError('release','Required parameter release was null or undefined when calling add.');
            }
            const localVarPath = `/release`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Release" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(release !== undefined ? release : {}) : (release || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets all releases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options: any = {}): RequestArgs {
            const localVarPath = `/release/all`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReleaseApi - functional programming interface
 * @export
 */
export const ReleaseApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new release
         * @param {Release} release The release to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(release: Release, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = ReleaseApiAxiosParamCreator(configuration).add(release, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Gets all releases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Release>> {
            const localVarAxiosArgs = ReleaseApiAxiosParamCreator(configuration).getAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReleaseApi - factory interface
 * @export
 */
export const ReleaseApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Add a new release
         * @param {Release} release The release to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        add(release: Release, options?: any) {
            return ReleaseApiFp(configuration).add(release, options)(axios, basePath);
        },
        /**
         * 
         * @summary Gets all releases
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(options?: any) {
            return ReleaseApiFp(configuration).getAll(options)(axios, basePath);
        },
    };
};

/**
 * ReleaseApi - object-oriented interface
 * @export
 * @class ReleaseApi
 * @extends {BaseAPI}
 */
export class ReleaseApi extends BaseAPI {
    /**
     * 
     * @summary Add a new release
     * @param {Release} release The release to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleaseApi
     */
    public add(release: Release, options?: any) {
        return ReleaseApiFp(this.configuration).add(release, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Gets all releases
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReleaseApi
     */
    public getAll(options?: any) {
        return ReleaseApiFp(this.configuration).getAll(options)(this.axios, this.basePath);
    }

}


/**
 * RollbackApi - axios parameter creator
 * @export
 */
export const RollbackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Rollback an environment to a previous stage
         * @param {Rollback} rollback The Rollback to execute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollback(rollback: Rollback, options: any = {}): RequestArgs {
            // verify required parameter 'rollback' is not null or undefined
            if (rollback === null || rollback === undefined) {
                throw new RequiredError('rollback','Required parameter rollback was null or undefined when calling rollback.');
            }
            const localVarPath = `/rollback`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Rollback" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(rollback !== undefined ? rollback : {}) : (rollback || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check which instances the Rollback would affect
         * @param {Rollback} rollback The rollback to dry run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackDryRun(rollback: Rollback, options: any = {}): RequestArgs {
            // verify required parameter 'rollback' is not null or undefined
            if (rollback === null || rollback === undefined) {
                throw new RequiredError('rollback','Required parameter rollback was null or undefined when calling rollbackDryRun.');
            }
            const localVarPath = `/rollback/dryrun`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"Rollback" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(rollback !== undefined ? rollback : {}) : (rollback || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RollbackApi - functional programming interface
 * @export
 */
export const RollbackApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Rollback an environment to a previous stage
         * @param {Rollback} rollback The Rollback to execute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollback(rollback: Rollback, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = RollbackApiAxiosParamCreator(configuration).rollback(rollback, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Check which instances the Rollback would affect
         * @param {Rollback} rollback The rollback to dry run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackDryRun(rollback: Rollback, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PendingReleaseInstance>> {
            const localVarAxiosArgs = RollbackApiAxiosParamCreator(configuration).rollbackDryRun(rollback, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RollbackApi - factory interface
 * @export
 */
export const RollbackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Rollback an environment to a previous stage
         * @param {Rollback} rollback The Rollback to execute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollback(rollback: Rollback, options?: any) {
            return RollbackApiFp(configuration).rollback(rollback, options)(axios, basePath);
        },
        /**
         * 
         * @summary Check which instances the Rollback would affect
         * @param {Rollback} rollback The rollback to dry run
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackDryRun(rollback: Rollback, options?: any) {
            return RollbackApiFp(configuration).rollbackDryRun(rollback, options)(axios, basePath);
        },
    };
};

/**
 * RollbackApi - object-oriented interface
 * @export
 * @class RollbackApi
 * @extends {BaseAPI}
 */
export class RollbackApi extends BaseAPI {
    /**
     * 
     * @summary Rollback an environment to a previous stage
     * @param {Rollback} rollback The Rollback to execute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RollbackApi
     */
    public rollback(rollback: Rollback, options?: any) {
        return RollbackApiFp(this.configuration).rollback(rollback, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Check which instances the Rollback would affect
     * @param {Rollback} rollback The rollback to dry run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RollbackApi
     */
    public rollbackDryRun(rollback: Rollback, options?: any) {
        return RollbackApiFp(this.configuration).rollbackDryRun(rollback, options)(this.axios, this.basePath);
    }

}


